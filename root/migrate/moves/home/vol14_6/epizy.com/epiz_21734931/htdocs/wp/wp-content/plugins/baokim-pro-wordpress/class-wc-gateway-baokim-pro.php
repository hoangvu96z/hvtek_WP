<?php/** * Plugin Name: BaoKim Payment Pro Gateway * Plugin URI: developer.baokim.vn/module-php/18 * Description: Thanh toán với Bảo Kim đảm bảo tuyệt đối cho mọi giao dịch * - Tích hợp thanh toán qua baokim.vn cho các merchant site có đăng ký API. * - Thực hiện lấy thông tin tài khoản người bán                             * *          danh sách các phương thức thanh toán ngân hàng qua email * - Gửi thông tin thanh toán tới baokim.vn để xử lý việc thanh toán. * - Xác thực tính chính xác của thông tin được gửi về từ baokim.vn * Version: 1.0 * Author: hieunn * Author URI: http://developer.baokim.vn/ * License: BaoKim, Jsc 2013 */if (!defined('ABSPATH')) exit; // Exit if accessed directlyinclude(WP_PLUGIN_DIR . '/baokim-pro-wordpress/call_restful.php');define('BAOKIM_API_SELLER_INFO', '/payment/rest/payment_pro_api/get_seller_info');define('BAOKIM_API_PAYMENT_PRO', '/payment/rest/payment_pro_api/pay_by_card');//Check ì WooCommerce is activeif (in_array('woocommerce/woocommerce.php', apply_filters('active_plugins', get_option('active_plugins')))) {	//Create class after the plugins are loaded	add_action('plugins_loaded', 'init_baokim_pro_gateway_class');	//Init payment gateway class	function init_baokim_pro_gateway_class()	{		add_filter( 'woocommerce_currencies', 'add_my_currency' );		function add_my_currency( $currencies ) {			$currencies['VND'] = __( 'Viet Nam Dong', 'woocommerce' );			return $currencies;		}		add_filter('woocommerce_currency_symbol', 'add_my_currency_symbol', 10, 2);		function add_my_currency_symbol( $currency_symbol, $currency ) {			switch( $currency ) {				case 'VND': $currency_symbol = ' VND '; break;			}			return $currency_symbol;		}		/**		 * BaoKim Payment Pro Gateway		 *		 * Provides a BaoKim Payment Pro Gateway.		 *		 * @class       WC_Baokim_Pro		 * @extends     WC_Gateway_Baokim_Pro		 * @version     1.0.0		 * @package     WooCommerce/Classes/Payment		 * @author      hieunn		 */		class WC_Gateway_Baokim_Pro extends WC_Payment_Gateway		{			var $notify_url;			/**			 * Constructor for the gateway.			 *			 * @access public			 * @return \WC_Gateway_Baokim_Pro			 */			public function __construct()			{				global $woocommerce;				$this->id = 'baokim_pro';				//$this->icon = apply_filters('woocommerce_baokim_icon', $woocommerce->plugin_url() . '/assets/images/icons/baokim.png');				$this->has_fields = false;				$this->method_title = __('BaoKim Payment Pro', 'woocommerce');				$this->liveurl = 'https://www.baokim.vn';				$this->testurl = 'http://sandbox.baokim.vn';				//load the setting				$this->init_form_fields();				$this->init_settings();				//Define user set variables				$this->title = $this->get_option('title');				$this->description = $this->get_option('description');				$this->email = $this->get_option('email');				$this->bk_api_username = $this->get_option('bk_api_username');				$this->bk_api_password = $this->get_option('bk_api_password');				$this->bk_api_signature = $this->get_option('bk_api_signature');				$this->bk_transaction_method = $this->get_option('bk_transaction_method');				$this->testmode = $this->get_option('testmode');				$this->bpn_file = $this->get_option('bpn_file');				if(is_admin()){					$html_plus = $this->inti_credit_card();					$this->description .= $html_plus;				}else{					wp_enqueue_style( 'baokim_pro_css', $woocommerce->plugin_url() . '/../baokim-pro-wordpress/assets/css/baokim_pro.css' );				}				$this->form_submission_method = false;				//Action				add_action('valid-baokim-standard-ipn-request', array($this, 'successful_request'));				add_action('woocommerce_receipt_baokim', array($this, 'receipt_page'));				add_action('woocommerce_update_options_payment_gateways_' . $this->id, array($this, 'process_admin_options'));				add_action('woocommerce_api_wc_gateway_baokim_pro', array($this, 'callback'));				if (!$this->is_valid_for_use()) $this->enabled = false;			}			private function inti_credit_card(){				global $woocommerce;				$param = array(					'business' => $this->email,				);				$call_restfull = new CallRestful();				$call_API = $call_restfull->call_API("GET",$param,BAOKIM_API_SELLER_INFO,$this);				if(is_array($call_API)){					if(!empty($call_API['error'])){					echo "<strong style='color:red'>call_API".json_encode($call_API['error'])."</strong> - " . "System error. Please contact to administrator";					return;					}				}				$seller_info = json_decode($call_API, true);				if(!empty($seller_info['error'])){					echo "<strong style='color:red'>eller_info".json_encode($seller_info['error'])."</strong> - " . "System error. Please contact to administrator";					return;				}//				echo '<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />';//				echo '<pre>'.print_r($seller_info, true).'</pre>';die;				$banks = $seller_info['bank_payment_methods'];				if ($this->testmode == 'yes'){					$baokim_mode = 'thử nghiệm';				} else {					$baokim_mode = 'thực tế';				}				$html_plus = '</br>';				$html_plus .= '<span class="vmpayment_cardinfo" style="margin-left: 16px;">Chọn thẻ tín dụng của bạn muốn sử dụng.  <b>Đây là một giao dịch '. $baokim_mode .' </b>';				$html_plus .= '</span>';				$html_plus .= '<div class="content" id="payment">';				$html_plus .= '<div class="credit-card">';				$i = 0; foreach ($banks as $bank) {					if($bank['payment_method_type'] == 1 || $bank['payment_method_type'] == 2) {						$html_plus .= '<img src='. $bank['logo_url'] . ' class="logo_bank" onClick="choose_bank(this.id)" id="bank_' . $bank['id'] .'"/>';					}				}				$html_plus .= '<input type="hidden" value="" id="baokim_bank_payment_method_id" name="baokim_bank_payment_method_id"/>';				$html_plus .= '</div>';				$html_plus .= '</div>';				$html_plus .= '<script type="text/javascript">'					.'function choose_bank(clicked_id){'					//.'alert(clicked_id);'					.'var el = clicked_id.split("_");'					.'var elements = document.getElementsByClassName("logo_bank");'					.'for (var i = 0; i < elements.length; i++) {'					.'document.getElementById(elements[i].id).className = "logo_bank";'					//.'console.log(elements[i].id);'					.'}'					.'document.getElementById(clicked_id).className = "logo_bank selected";'					.'document.getElementById("baokim_bank_payment_method_id").value = el[1];'					.'}'					.'</script>';				return $html_plus;			}			/**			 * Check if this gateway is enabled and available in the user's country			 *			 * @access public			 * @return bool			 */			function is_valid_for_use()			{				if (!in_array(get_woocommerce_currency(), apply_filters('woocommerce_baokim_supported_currencies', array('VND', 'VNĐ', 'USD'))))					return false;				return true;			}			/**			 * Admin Panel Options			 * - Options for bits like 'title' and availability on a country-by-country basis			 *			 * @since 1.0.0			 */			public function admin_options()			{				?>				<h3><?php _e('Thanh toán Bảo Kim', 'woocommerce'); ?></h3>				<strong><?php _e('Đảm bảo an toàn tuyệt đối cho mọi giao dịch.', 'woocommerce'); ?></strong>				<?php if ($this->is_valid_for_use()) : ?>				<table class="form-table">					<?php					// Generate the HTML For the settings form.					$this->generate_settings_html();					?>				</table><!--/.form-table-->			<?php else : ?>				<div class="inline error"><p>						<strong><?php _e('Gateway Disabled', 'woocommerce'); ?></strong>: <?php _e('Phương thức thanh toán Bảo Kim không hỗ trợ loại tiền tệ trên gian hàng của bạn.', 'woocommerce'); ?>					</p></div>			<?php			endif;			}			/**			 * Initialise Gateway Settings Form Fields			 *			 * @access public			 * @return void			 */			function init_form_fields()			{				$this->form_fields = array(					'enabled' => array(						'title' => __('Sử dụng phương thức', 'woocommerce'),						'type' => 'checkbox',						'label' => __('Đồng ý', 'woocommerce'),						'default' => 'yes'					),					'title' => array(						'title' => __('Tiêu đề', 'woocommerce'),						'type' => 'text',						'description' => __('Tiêu đề của phương thức thanh toán bạn muốn hiển thị cho người dùng.', 'woocommerce'),						'default' => __('Bảo Kim Pro', 'woocommerce'),						'desc_tip' => true,					),					'description' => array(						'title' => __('Mô tả phương thức thanh toán', 'woocommerce'),						'type' => 'textarea',						'description' => __('Mô tả của phương thức thanh toán bạn muốn hiển thị cho người dùng.', 'woocommerce'),						'default' => __('Thanh toán với Bảo Kim. Thực hiện thanh toán với thẻ ngân hàng trực tuyến', 'woocommerce')					),					'account_config' => array(						'title' => __('Cấu hình tài khoản', 'woocommerce'),						'type' => 'title',						'description' => '',					),					'email' => array(						'title' => __('E-mail Bảo Kim', 'woocommerce'),						'type' => 'email',						'description' => __('E-mail tài khoản bạn đăng ký với BaoKim.vn.', 'woocommerce'),						'default' => '',						'desc_tip' => true,						'placeholder' => 'you@youremail.com'					),					'api_account_config' => array(						'title' => __('API', 'woocommerce'),						'type' => 'title',						'description' => '',					),					'bk_api_username' => array(						'title' => __('BaoKim API UserName', 'woocommerce'),						'type' => 'text',						'description' => __('Tên tài khoản API.', 'woocommerce'),						'default' => '',						'desc_tip' => true,					),					'bk_api_password' => array(						'title' => __('BaoKim API Password', 'woocommerce'),						'type' => 'text',						'description' => __('Mật khẩu tài khoản API.', 'woocommerce'),						'default' => '',						'desc_tip' => true,					),					'bk_api_signature' => array(						'title' => __('BaoKim Signature'),						'type' => 'textarea',						'description' => __('Chữ ký bảo mật','woocommerce'),						'default' => '',						'desc_tip' => true,					),					'bk_transaction_method' => array(						'title' => __('BaoKim Trasaction Method'),						'type'        => 'select',						'description' => __('Phương thức giao dịch','woocommerce'),						'default' => '',						'desc_tip' => true,						'options'     => array(							'1' => __('Trực tiếp', 'woocommerce' ),							'2' => __('An toàn', 'woocommerce' )						)					),					'testmode' => array(						'title' => __('Bảo Kim kiểm thử', 'woocommerce'),						'type' => 'checkbox',						'label' => __('Sử dụng Bảo Kim kiểm thử', 'woocommerce'),						'default' => 'yes',						'description' => 'Bảo Kim kiểm thử được sử đụng kiểm tra phương thức thanh toán.',					),					'testing' => array(						'title' => __('Cấu hình BPN(BaoKim Payment Notification)', 'woocommerce'),						'type' => 'title',						'description' => '',					),					'bpn_file' => array(						'title' => __('Tên file lưu log', 'woocommerce'),						'type' => 'text',						'description' => sprintf(__('Tên file lưu trữ log trong quá trình thực hiện BPN, truy cập file log <code>woocommerce/logs/bpn-%s.log</code>', 'woocommerce'), date("d-m")),						'default' => 'bpn',						'desc_tip' => true,					),				);			}			/**			 * Process the payment and return the result			 *			 * @access public			 * @param int $order_id			 * @return array			 */			function process_payment($order_id)			{				$order = new WC_Order($order_id);				if (!$this->form_submission_method) {					$result = $this->get_baokim_args($order);					if(!empty($result['error'])){						echo '<p class="woocommerce-error"><strong>' . $result['error'] . '</strong></p></div>';						die;					}					$baokim_url = $result['redirect_url'] ? $result['redirect_url'] : $result['guide_url'];					return array(						'result' => 'success',						'redirect' => $baokim_url					);				} else {					return array(						'result' => 'success',						'redirect' => add_query_arg('order', $order->id, add_query_arg('key', $order->order_key, get_permalink(woocommerce_get_page_id('pay'))))					);				}			}			/**			 * Lấy thông tin đơn hàng			 * @param mixed $order			 * @internal param order_id             Mã đơn hàng			 * @internal param business             Tài khoản người bán			 * @internal param total_amount         Giá trị đơn hàng			 * @internal param shipping_fee         Phí vận chuyển			 * @internal param tax_fee              Thuế			 * @internal param order_description    Mô tả đơn hàng			 * @internal param url_success          Url trả về khi thanh toán thành công			 * @internal param url_cancel           Url trả về khi hủy thanh toán			 * @internal param url_detail           Url chi tiết đơn hàng			 * @internal param payer_name           Thông tin thanh toán			 * @internal param payer_email			 * @internal param payer_phone_no			 * @internal param shipping_address			 * @access public			 * @return array			 */			function get_baokim_args($order)			{				global $woocommerce;				$order_id = time() . "-" . $order->id;				$url_success = get_bloginfo('wpurl') . "/?wc-api=WC_Gateway_Baokim&action=order_received&order_id=".$order_id;				$url_cancel = $order->get_cancel_order_url();				$params['business'] = strval($this->email);				$params['bank_payment_method_id'] = strval($_POST['baokim_bank_payment_method_id']);				$params['transaction_mode_id'] = strval($this->bk_transaction_method);				$params['escrow_timeout'] = 3;				$params['order_id'] = strval($order_id);				$params['total_amount'] = strval($order->order_total);				$params['shipping_fee'] = strval($order->order_shipping);//isset($method->no_shipping) ? $method->no_shipping : 0,				$params['tax_fee'] = strval($order->order_tax);				$params['currency_code'] = strval(get_woocommerce_currency());				$params['url_success'] =  $url_success;				$params['url_cancel'] = $url_cancel;				$params['url_detail'] = '';				$params['order_description'] = preg_replace('/[^a-zA-Z0-9\_-]/', '', $order->customer_note);				$params['payer_name'] = strval($order->billing_first_name . " " . $order->billing_last_name);				$params['payer_email'] = strval($order->billing_email);				$params['payer_phone_no'] = strval($order->billing_phone);				$params['payer_address'] = strval($order->shipping_address_1);				$call_restfull = new CallRestful();				$result = json_decode($call_restfull->call_API("POST",$params,BAOKIM_API_PAYMENT_PRO,$this), true);				return $result;			}			/**			 * Điều hướng tác vụ xử lý cập nhật đơn hàng sau thanh toán hoặc nhận BPN từ Bảo Kim			 */			function callback()			{				if (!empty($_GET) && isset($_GET['action'])) {					switch ($_GET['action']) {						case 'order_received' :							$this->order_received();							break;						case 'bpn' :							$this->baokim_payment_notification();							break;					}				}			}			/**			 * Hàm thực hiện kiểm tra đơn hàng và cập nhập trạng thái đơn hàng sau khi thanh toán tại baokim.vn			 */			private function order_received()			{				if (isset($_GET['order_id']) && !empty($_GET['order_id'])) {					$str_id = explode("-", $_GET['order_id']);					$order_id = $str_id[1];					if (is_numeric($order_id) && $order_id > 0) :						$order = new WC_Order($order_id); else :						die;					endif;					if (empty($order))						die;					unset($_GET['wc-api']);					unset($_GET['action']);//					if ($this->verifyResponseUrl($_GET)) {						wp_redirect(add_query_arg('utm_nooverride', '1', $this->get_return_url($order)));					//} else {					//	$order->get_cancel_order_url();					//}				}			}			/**			 * BAOKIM PAYMENT NOTIFICATION			 */			private function baokim_payment_notification()			{				include(WP_PLUGIN_DIR . '/baokim-pro-wordpress/baokim_listener.php');				$bpn = new WC_Baokim_listener($this->testmode);				$bpn->index();			}			/**			 * Hàm xây dựng url chuyển đến BaoKim.vn thực hiện thanh toán, trong đó có tham số mã hóa (còn gọi là public key)			 * @param $data             Các tham số thông tin đơn hàng gửi đến BaoKim			 * @param $baokim_server    URL Server xử lý đơn hàng của Bảo Kim.			 * @return url cần tạo			 */			private function createRequestUrl($data, $baokim_server)			{				// Mảng các tham số chuyển tới baokim.vn				$params = $data;				ksort($params);				$params['checksum'] = hash_hmac('SHA1', implode('', $params), $this->secure_pass);				//Kiểm tra  biến $redirect_url xem có '?' không, nếu không có thì bổ sung vào				$redirect_url = $baokim_server;				if (strpos($redirect_url, '?') === false) {					$redirect_url .= '?';				} else if (substr($redirect_url, strlen($redirect_url) - 1, 1) != '?' && strpos($redirect_url, '&') === false) {					// Nếu biến $redirect_url có '?' nhưng không kết thúc bằng '?' và có chứa dấu '&' thì bổ sung vào cuối					$redirect_url .= '&';				}				// Tạo đoạn url chứa tham số				$url_params = '';				foreach ($params as $key => $value) {					if ($url_params == '')						$url_params .= $key . '=' . urlencode($value);					else						$url_params .= '&' . $key . '=' . urlencode($value);				}				return $redirect_url . $url_params;			}			/**			 * Hàm thực hiện xác minh tính chính xác thông tin trả về từ BaoKim.vn			 * @param array $url_params chứa tham số trả về trên url			 * @return true nếu thông tin là chính xác, false nếu thông tin không chính xác			 */			private function verifyResponseUrl($url_params = array())			{				if (empty($url_params['checksum'])) {					echo "invalid parameters: checksum is missing";					return FALSE;				}				$checksum = $url_params['checksum'];				unset($url_params['checksum']);				ksort($url_params);				if (strcasecmp($checksum, hash_hmac('SHA1', implode('', $url_params), $this->secure_pass)) === 0)					return TRUE;				else					return FALSE;			}		}		class WC_Baokim_Pro extends WC_Gateway_Baokim_Pro		{			public function __construct()			{				_deprecated_function('WC_Baokim_Pro', '1.4', 'WC_Gateway_Baokim_Pro');				parent::__construct();			}		}		//Defining class gateway		function add_baokim_pro_gateway_class( $methods ) {			$methods[] = 'WC_Gateway_Baokim_Pro';			return $methods;		}		add_filter( 'woocommerce_payment_gateways', 'add_baokim_pro_gateway_class' );	}}